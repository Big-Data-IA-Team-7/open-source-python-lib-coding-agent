name: Open Source Python Lib Coding Agent Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      FAST_API_URL: ${{ secrets.FAST_API_URL }}
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      LANGCHAIN_ENDPOINT: ${{ secrets.LANGCHAIN_ENDPOINT }}
      LANGCHAIN_PROJECT: ${{ secrets.LANGCHAIN_PROJECT }}
      LANGCHAIN_TRACING_V2: ${{ secrets.LANGCHAIN_TRACING_V2 }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up QEMU and Docker Buildx
      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 5: Build Docker image and push
      - name: Build Docker image and push
        run: |
          TIMESTAMP=$(date +%Y%m%d%H)  # Unique timestamp format with seconds
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/open-source-python:latest --push .

      # Step 6: Deploy to EC2
      - name: SSH into EC2 and deploy the app
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.EC2_SERVER_IP }}
        run: |
          # Save the private key to a file and set proper permissions
          echo "$PRIVATE_KEY" > cicd.pem
          chmod 600 cicd.pem

          # Start SSH agent and add the private key
          eval "$(ssh-agent -s)"
          ssh-add cicd.pem

          # SSH into the EC2 instance and run deployment commands
          ssh -o StrictHostKeyChecking=no ubuntu@$SERVER_IP << EOF
            TIMESTAMP=$(date +%Y%m%d%H)
            # Pull the Docker image from Docker Hub using the timestamp
            docker pull "${{ secrets.DOCKER_USERNAME }}/open-source-python:latest"

            
            # Stop the existing container
            docker ps -a --filter "ancestor=ramkumarrp16077/open-source-python:latest" -q | xargs -r docker stop

            # Run the new container
            sudo docker run -d \
              -p 8000:8000 -p 8501:8501 \
              -e ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e FAST_API_URL="${{ secrets.FAST_API_URL }}" \
              -e LANGCHAIN_API_KEY="${{ secrets.LANGCHAIN_API_KEY }}" \
              -e LANGCHAIN_ENDPOINT="${{ secrets.LANGCHAIN_ENDPOINT }}" \
              -e LANGCHAIN_PROJECT="${{ secrets.LANGCHAIN_PROJECT }}" \
              -e LANGCHAIN_TRACING_V2="${{ secrets.LANGCHAIN_TRACING_V2 }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e SERPAPI_KEY="${{ secrets.SERPAPI_KEY }}" \
              -e SNOWFLAKE_ACCOUNT="${{ secrets.SNOWFLAKE_ACCOUNT }}" \
              -e SNOWFLAKE_DATABASE="${{ secrets.SNOWFLAKE_DATABASE }}" \
              -e SNOWFLAKE_PASSWORD="${{ secrets.SNOWFLAKE_PASSWORD }}" \
              -e SNOWFLAKE_ROLE="${{ secrets.SNOWFLAKE_ROLE }}" \
              -e SNOWFLAKE_SCHEMA="${{ secrets.SNOWFLAKE_SCHEMA }}" \
              -e SNOWFLAKE_USER="${{ secrets.SNOWFLAKE_USER }}" \
              -e SNOWFLAKE_WAREHOUSE="${{ secrets.SNOWFLAKE_WAREHOUSE }}" \
              -e DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}" \
              -e DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}" \
              "${{ secrets.DOCKER_USERNAME }}/open-source-python:latest"
          EOF
